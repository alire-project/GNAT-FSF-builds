name: macOS_arm
on:
  pull_request:
  workflow_dispatch:

jobs:
  gnat:
    name: GNAT macOS
    runs-on: macos-14
    steps:
    - name: Set Xcode 15.3
      run: sudo xcode-select --switch /Applications/Xcode_15.3.app

    - name: Checkout Project
      uses: actions/checkout@v2

    - name: Install texinfo with Homebrew
      run: brew install texinfo

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install e3-core==22.1.0

    - name: Build GNAT native
      run: ./anod build gcc -v --loglevel DEBUG --enable-cleanup

    - name: Build GDB
      run: ./anod build gdb -v --loglevel DEBUG --enable-cleanup

    - name: Package GNAT
      run: ./anod build release_package --qualifier=package=gnat,do_gh_release -v --loglevel DEBUG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for GitHub CLI tool

    - uses: actions/upload-artifact@v2
      with:
        name: anod-artifacts
        path: out_artifacts/*
        retention-days: 1

    - uses: actions/upload-artifact@v2
      with:
        name: release-packages
        path: sbx/*/release_package*/install/*
        retention-days: 5

  gnat_cross:
    strategy:
      fail-fast: false
      matrix:
        target: ["arm-elf", "esp32-elf", "riscv64-elf"] # , "avr-elf"]
        # libc-avr doesn't recognize aarch64-apple machine
        # https://github.com/avrdudes/avr-libc/issues/978
    name: GNAT ${{ matrix.target }}-darwin
    needs: gnat
    runs-on: macos-14
    steps:
    - name: Set Xcode 15.3
      run: sudo xcode-select --switch /Applications/Xcode_15.3.app

    - name: Checkout Project
      uses: actions/checkout@v2

    - name: Install texinfo with Homebrew
      run: brew install texinfo

    - uses: actions/download-artifact@v2
      with:
        name: anod-artifacts
        path: in_artifacts/

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install e3-core==22.1.0
        FILE=$(python -c "import e3.platform_db.knowledge_base;print (e3.platform_db.knowledge_base.__file__)")
        patch "$FILE" ./esp32-e3.patch

    - name: Build GNAT ${{ matrix.target }}
      run: ./anod build gcc -v --loglevel DEBUG --target=${{ matrix.target }} --enable-cleanup

    - name: Build GDB ${{ matrix.target }}
      run: ./anod build gdb -v --loglevel DEBUG --target=${{ matrix.target }} --enable-cleanup

    - name: Package GNAT ${{ matrix.target }}
      run: ./anod build release_package --qualifier=package=gnat,do_gh_release --target=${{ matrix.target }} -v --loglevel DEBUG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for GitHub CLI tool

    - uses: actions/upload-artifact@v2
      with:
        name: release-packages
        path: sbx/*/release_package*/install/*
        retention-days: 5


  why3:
    strategy:
      matrix:
        ocaml-compiler:
          - 4.12.1
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: 'adacore/why3'
          ref: 'fsf-14'

      - name: Use Setup OCaml {{ matrix.ocaml-version }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler}}

      - name: Setup Packages
        run: |
          opam depext zarith re seq why3
          opam install dune dune-configurator menhir num ocamlgraph re seq yojson zarith sexplib ppx_sexp_conv ppx_deriving

      - run: opam exec -- ./configure --prefix=/tmp/why3install --enable-relocation --disable-emacs-compilation --disable-hypothesis-selection --disable-js-of-ocaml --disable-zip

      - run: opam exec -- make

      - run: opam exec -- make install_spark2014

      - run: git log --format="%H" -n 1 > /tmp/why3install/why3-version.txt

      - name: Upload the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: why3
          path: /tmp/why3install


  alt_ergo:
    strategy:
      matrix:
        ocaml-compiler:
          - "4.12.1"

    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: 'adacore/alt-ergo'
          ref: 'fsf-14'

      - name: Use Setup OCaml {{ matrix.ocaml-version }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install alt-ergo --destdir=/tmp/alt-ergo-install

      - run: git log --format="%H" -n 1 > /tmp/alt-ergo-install/alt-ergo-version.txt

      - name: Upload the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: alt-ergo
          path: /tmp/alt-ergo-install



  spark:
    name: SPARK
    needs: [why3, alt_ergo]
    runs-on: macos-14
    steps:
    - name: Checkout Project
      uses: actions/checkout@v2

    - name: Set Xcode 15.3
      run: sudo xcode-select --switch /Applications/Xcode_15.3.app

    - uses: actions/download-artifact@v2
      with:
        name: alt-ergo
        path: alt-ergo_artifact/

    - uses: actions/download-artifact@v2
      with:
        name: why3
        path: why3_artifact/

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install e3-core==22.1.0

    - name: Build SPARK
      run: ./anod build spark2014 -v --loglevel DEBUG --enable-cleanup

    - name: Package GNATprove
      run: ./anod build release_package --qualifier=package=gnatprove,do_gh_release -v --loglevel DEBUG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for GitHub CLI tool

    - uses: actions/upload-artifact@v2
      with:
        name: release-packages
        path: sbx/*/release_package*/install/*
        retention-days: 5
