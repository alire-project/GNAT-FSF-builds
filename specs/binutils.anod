import os

from e3.os.fs import unixpath
from e3.fs import sync_tree, mv
from e3.anod.helper import Configure, Make
from e3.anod.spec import Anod
from e3.anod.loader import spec


class Binutils(spec("common")):
    @property
    def version(self):
        return "2.40"

    @property
    def tarball(self):
        return "binutils-%s.tar.gz" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://ftp.gnu.org/gnu/binutils/" + self.tarball,
            )
        ]

    @property
    def build_source_list(self):
        return [Anod.Source(name=self.tarball, publish=True, dest="")]

    @property
    def build_deps(self):
        deps = [
            Anod.Dependency("base_gcc", host="build", target="host"),
            Anod.Dependency("gmp", target="host"),
            Anod.Dependency("mpfr", target="host"),
            Anod.Dependency("mpc", target="host"),
            Anod.Dependency("isl", target="host"),
        ]

        if self.env.is_canadian:
            deps.append(
                Anod.Dependency(
                    name="gcc",
                    host="build",
                    target="host",
                    local_name="canadian-cross-compiler",
                )
            )

        return deps

    def merge(self, prefix):
        sync_tree(self["INSTALL_DIR"], prefix, delete=False)

    @Anod.primitive()
    def build(self):
        for m in self.deps:
            self.deps[m].setenv()

        configure = Configure(self)
        configure.add("--prefix=%s" % unixpath(self["INSTALL_DIR"]))
        configure.add(
            "--disable-nls",
            "--disable-shared",
            "--disable-werror",
            "--with-zlib",
            "--disable-compressed-debug-sections",
            "--disable-separate-code",
            "--disable-gdb",
            "--disable-sim",
            "--disable-libquadmath",
            "--disable-readline",
        )

        # For embedded only?
        configure.add("--enable-multilib")

        for m in ("mpfr", "gmp", "mpc", "isl"):
            configure.add("--with-%s=%s" % (m, unixpath(self.deps[m]["INSTALL_DIR"])))

        configure()

        make = Make(self)
        make()
        make("install")


        # https://github.com/msys2/MINGW-packages/issues/7890
        if self.env.build.os.name == "windows":
            # for some reason 'rm' doesn't seem to work, so we are moving the file to the build dir
            mv(os.path.join(self["INSTALL_DIR"], "lib", "bfd-plugins", "libdep.a"), 
               os.path.join(self["BUILD_DIR"], "libdep.a.disable"))


        # We do not clean the binutils builds and install on native targets as
        # they are used for gnatcov build.
        if self.env.target.os.is_bareboard:
            self.clean()
