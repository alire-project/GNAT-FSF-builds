from e3.os.fs import touch
from e3.anod.helper import Make
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.fs import cp
from e3.diff import patch
import os

# patch from gprbuild repo:
# https://github.com/AdaCore/gprbuild/commit/0b775473a8eb5f820f487869d31ac534a437826c
patch_name = "libgpr-fix-macos-build.patch"


class LibGPR(spec("common")):
    @property
    def version(self):
        return "22.0.0"

    @property
    def tarball(self):
        return "libgpr-%s.tar.gz" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://github.com/AdaCore/gprbuild/archive/v%s.tar.gz"
                % self.version,
            ),
            self.LocalSourceBuilder(name=patch_name),
        ]

    @property
    def build_source_list(self):
        return [
            Anod.Source(name=self.tarball, publish=True, dest=""),
            self.Source(name=patch_name, publish=True, unpack_cmd=cp, dest="patches"),
        ]

    @property
    def build_deps(self):
        return [
            Anod.Dependency("gcc", track=True),
            Anod.Dependency("gprbuild", track=True),
            Anod.Dependency("xmlada", track=True),
        ]

    @Anod.primitive()
    def build(self):
        for m in self.deps:
            self.deps[m].setenv()

        # Little hack to apply the patch only once, there is probably a clean
        # way to do that.
        patched = os.path.join(self["SRC_DIR"], "patches", ".patched")
        if not os.path.exists(patched):
            patch(
                os.path.join(self["SRC_DIR"], "patches", patch_name),
                self.build_space.src_dir,
            )
            touch(patched)

        make = Make(self, exec_dir=self["SRC_DIR"])
        make("libgpr.build")

        make("libgpr.install", "prefix=" + self["INSTALL_DIR"])

        self.clean()
