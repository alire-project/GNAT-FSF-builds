from e3.anod.error import ShellError
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.fs import mkdir, sync_tree
import os


class GNU(spec("gh-artifact")):
    def pre_build(self):
        """Method called just before starting the build."""

    def compiler_deps(self):
        deps = [Anod.Dependency("base_gcc", host="build", target="host")]

        return deps

    def setenv(self):
        self.env.add_search_path(
            "C_INCLUDE_PATH", os.path.join(self["INSTALL_DIR"], "include")
        )
        self.env.add_search_path(
            "LIBRARY_PATH", os.path.join(self["INSTALL_DIR"], "lib")
        )
        self.env.add_search_path(
            "LIBRARY_PATH", os.path.join(self["INSTALL_DIR"], "lib64")
        )

    def artifact_build(self):
        # This spec inherit from gh-artifact and therefore has a different
        # build method.

        self.pre_build()
        for m in self.deps:
            self.deps[m].setenv()
        try:
            self["configure"]()
        except ShellError:
            self.add_log_file("config.log")
            raise
        self["make"](jobs=self.jobs)
        # Many projects fail when running `make install` with parallel jobs
        self["make"]("install", jobs=1)

        lib_dir = os.path.join(self["INSTALL_DIR"], "lib")
        lib64_dir = os.path.join(self["INSTALL_DIR"], "lib64")
        if self.env.target.platform == "x86_64-linux":
            # On some old x86_64-linux system gcc might changes drastically
            # LIBRARY_PATH. For example if this var is set to /mydir/lib:/lib
            # gcc might call ld with
            # /mydir/lib/../lib64:/lib/../lib64:/mydir/lib:/lib
            # The consequence is that sometimes we might pick the library from
            # the system instead of the recently built one. So, make sure to
            # provide lib64 as well as lib.

            if os.path.isdir(lib_dir) and not os.path.isdir(lib64_dir):
                mkdir(lib64_dir)
                sync_tree(lib_dir, lib64_dir)

        self.clean()
