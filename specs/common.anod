from e3.anod.package import UnmanagedSourceBuilder
from e3.anod.spec import Anod
from e3.anod.error import AnodError
import os
from e3.fs import rm, sync_tree
from e3.env import Env
from e3.anod.helper import log


class Common(Anod):
    """Helpers for GNAT build."""

    class HTTPSSourceBuilder(UnmanagedSourceBuilder):
        """Source builder that fetch sources using https."""

        def __init__(self, name, url, prepare_src=None):
            UnmanagedSourceBuilder.__init__(
                self,
                name=name,
                fullname=lambda: name,
                prepare_src=prepare_src,
                checkout=None,
            )
            self.url = url
            self.base_url, self.filename = url.rsplit("/", 1)

    class LocalSourceBuilder(UnmanagedSourceBuilder):
        def __init__(self, name):
            UnmanagedSourceBuilder.__init__(
                self, name=name, fullname=lambda: name, checkout=None
            )
            self.url = name
            self.filename = name

    def setenv(self, prefix=None, add_dll_path=True):
        """Common setenv for all uxas dependencies."""
        prefix = self["INSTALL_DIR"] if prefix is None else prefix
        log.debug("Calling %s.setenv prefix=%s", self.name, prefix)
        env_modified = False

        if os.path.exists(os.path.join(prefix, "bin")):
            self.env.add_path(os.path.join(prefix, "bin"))
            log.debug("Adding bin %s", os.path.join(prefix, "bin"))
            env_modified = True

        if add_dll_path:
            # Update library path.
            lib_dirs = [os.path.join(prefix, "lib")]
            if self.env.target.platform == "x86_64-linux":
                lib_dirs.append(os.path.join(prefix, "lib64"))

            for directory in lib_dirs:
                if os.path.exists(directory):
                    self.env.add_dll_path(directory)
                    env_modified = True

        if os.path.isdir(os.path.join(prefix, "share", "gpr")):
            self.env.add_search_path(
                "GPR_PROJECT_PATH", os.path.join(prefix, "share", "gpr")
            )
            env_modified = True

        if os.path.isdir(os.path.join(prefix, "lib", "gnat")):
            self.env.add_search_path(
                "GPR_PROJECT_PATH", os.path.join(prefix, "lib", "gnat")
            )
            env_modified = True

        if os.path.isdir(os.path.join(prefix, "include")):
            self.env.add_search_path(
                "C_INCLUDE_PATH", os.path.join(prefix, "include")
            )
            self.env.add_search_path(
                "CPLUS_INCLUDE_PATH", os.path.join(prefix, "include")
            )
            env_modified = True

        if not env_modified:
            if os.path.exists(prefix) and os.path.isdir(prefix) and os.listdir(prefix):
                raise AnodError(
                    "Calling setenv for %s did not modify the environment" % self.name
                )
            else:
                qual_str = (
                    " (qualifier " + self.qualifier + ")" if self.qualifier else ""
                )
                raise AnodError(
                    f"Calling setenv for {self.name}{qual_str} while the corresponding "
                    + "directory is empty. Is the component installed/built?"
                )

    @property
    def lib_dir(self):
        return os.path.join(self["INSTALL_DIR"], "lib")

    @property
    def include_dir(self):
        return os.path.join(self["INSTALL_DIR"], "include")

    def merge(self, prefix):
        sync_tree(self["INSTALL_DIR"], prefix, delete=False)

    def clean(self):
        if Env().main_options.enable_cleanup:
            rm(self["BUILD_DIR"], recursive=True)
            rm(self["SRC_DIR"], recursive=True)

    @property
    def host_is_macos_arm(self):
        return self.env.host.os.name == "darwin" and self.env.host.cpu.name == "aarch64"
