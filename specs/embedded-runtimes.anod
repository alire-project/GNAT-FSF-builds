from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.anod.error import AnodError

import os
import glob
import sys

class EmbeddedRuntimes(spec("common")):
    @property
    def version(self):
        return "15.1.0-1"

    @property
    def tarball(self):
        return "embedded-runtimes-%s.zip" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://github.com/alire-project/bb-runtimes/archive/v%s.zip"
                % self.version,
            )
        ]

    @property
    def build_source_list(self):
        return [Anod.Source(name=self.tarball, publish=True, dest="")]

    @property
    def build_deps(self):
        return [
            Anod.Dependency("gcc", track=True),
            Anod.Dependency("gprbuild", target="host", track=True),
        ]

    @property
    def board_list(self):
        board = []

        if self.env.target.platform == "arm-elf":
            board = [
                "tms570",
                "tms570lc",
                "lm3s",
                "stm32f4",
                "zynq7000",
                "cortex-m0",
                "cortex-m0p",
                "cortex-m1",
                "cortex-m3",
                "cortex-m4",
                "cortex-m4f",
                "cortex-m7f",
                "cortex-m7df",
                "cortex-m23",
                "cortex-m33f",
                "cortex-m33df",
                "samv71",
                "stm32f429disco",
                "stm32f469disco",
                "stm32f746disco",
                "stm32f769disco",
                "rpi2",
                "microbit",
                "feather_stm32f405",
                "nrf52832",
                "nrf52833",
                "nrf52840",
                "nucleo_f401re",
                "openmv2",
                "sam4s",
                "samg55",
                "rpi-pico",
                "rpi-pico-smp"
            ]

        elif self.env.target.platform == "riscv64-elf":
            board = [
                "spike",
                "polarfiresoc",
                "rv64im",
                "rv64imc",
                "rv64imac",
                "rv64imfc",
                "rv64imafc",
                "rv64imafdc",
                "hifive1",
                "rv32i",
                "rv32im",
                "rv32iac",
                "rv32imac",
                "rv32imafc",
                "rv32imafdc",
            ]

        elif self.env.target.platform == "aarch64-elf":
            board = [
                "rpi3",
                "rpi3mc",
                "zynqmp",
            ]

        else:
            raise AnodError("Unknown platform: %s" % self.env.target.platform)

        return board

    def rts_root_dir(self):
        if self.env.target.platform == "arm-elf":
            return "arm-eabi"
        elif self.env.target.platform == "riscv64-elf":
            return "riscv64-elf"
        elif self.env.target.platform == "aarch64-elf":
            return "aarch64-elf"
        else:
            raise AnodError("Unknown platform: %s" % self.env.target.platform)

    @Anod.primitive()
    def build(self):
        self.deps["gcc"].setenv()
        self.deps["gprbuild"].setenv()

        # base build commnad
        cmd = [sys.executable,
               os.path.join(self["SRC_DIR"], "build_rts.py"),
               "--rts-src-descriptor=%s"
               % os.path.join(self['SRC_DIR'], "gnat_rts_sources", "lib", "gnat", "rts-sources.json"),
               "--output=%s" % os.path.join (self['INSTALL_DIR'], self.rts_root_dir(), 'lib', 'gnat'),
               "--build",
               ]

        # make newlib headers visible
        if "newlib" in self.deps:
            newlib_inc = "-I%s" % os.path.join(
                self.deps["newlib"]["INSTALL_DIR"], self.env.target.triplet, "include"
            )
            cmd += ["--build-flag=-cargs:C %s" % newlib_inc]

        # get the list of boards
        cmd += self.board_list

        # Generate the runtimes and build them
        self.shell(*cmd)

        self.clean()
