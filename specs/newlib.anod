from e3.os.fs import unixpath, touch
from e3.anod.helper import Configure, Make
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.diff import patch
from e3.fs import cp
import os


patch_name = "newlib-fix-arm-eh_frame.patch"

class Newlib(spec("common")):
    @property
    def version(self):
        return "4.4.0.20231231"

    @property
    def tarball(self):
        return "newlib-%s.tar.gz" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://sourceware.org/pub/newlib/" + self.tarball,
            ),
            self.LocalSourceBuilder(name=patch_name),
        ]

    @property
    def build_source_list(self):
        return [Anod.Source(name=self.tarball, publish=True, dest=""),
            self.Source(name=patch_name, publish=True, unpack_cmd=cp, dest="patches"),
            ]

    @property
    def build_deps(self):
        deps = [Anod.Dependency("binutils")]

        if self.env.is_canadian:
            deps.append(
                Anod.Dependency(
                    "gcc", qualifier="bootstrap", host="build", target="target"
                )
            )
        else:
            deps.append(Anod.Dependency("gcc", qualifier="bootstrap"))

        return deps

    @Anod.primitive()
    def build(self):
        self.deps["gcc"].setenv()

        # Little hack to apply the patch only once, there is probably a clean
        # way to do that.
        patched = os.path.join(self["SRC_DIR"], "patches", ".patched")
        if not os.path.exists(patched):
            patch(
                os.path.join(self["SRC_DIR"], "patches", patch_name),
                self.build_space.src_dir,
            )
            touch(patched)


        configure = Configure(self)
        configure.add("--prefix=%s" % unixpath(self["INSTALL_DIR"]))

        configure.add(
            "--enable-newlib-io-long-long",
            "--enable-newlib-io-c99-formats",
            "--enable-newlib-register-fini",
            "--enable-newlib-retargetable-locking",
            "--disable-newlib-supplied-syscalls",
            "--disable-nls",
        )

        # configure.add("CFLAGS_FOR_TARGET=%s" % cflags)

        configure()

        make = Make(self)
        make(jobs=self.jobs)
        make("install-target-newlib")

        self.clean()
