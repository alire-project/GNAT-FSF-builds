from e3.anod.helper import Make
from e3.anod.loader import spec
from e3.anod.package import SourceBuilder
from e3.anod.spec import Anod
from e3.fs import cp, mv, sync_tree, ls, rm, mkdir
from e3.os.fs import chmod
import os


class SPARK2014(spec("common")):
    @property
    def version(self):
        return "15.1.0"
    
    @property
    def spark_branch(self):
        return "fsf-15"

    @property
    def tarball(self):
        return "spark2014-%s.tar.gz" % self.version

    @property
    def exec_suffix(self):
        if self.env.host.os.name == "windows":
            return ".exe"
        else:
            return ""

    @property
    def gcc_tarball(self):
        return "gcc-%s.tar.gz" % self.version

    @property
    def sparklib_tarball(self):
        return "sparkib-%s.tar.gz" % self.version
    
    @property
    def cvc5_version(self):
        return "1.2.1"

    @property
    def cvc5_zip(self):
        if self.env.host.os.name == "windows":
            fn = "cvc5-Win64-x86_64-static.zip"
        elif self.env.host.os.name == "darwin":
            if self.env.target.cpu.name == "x86_64":
                fn = "cvc5-macOS-x86_64-static.zip"
            else:
                fn = "cvc5-macOS-arm64-static.zip"
        else: # self.env.host.os.name == "linux":
            if self.env.target.cpu.name == "x86_64":
                fn = "cvc5-Linux-x86_64-static.zip"
            else:
                fn = "cvc5-Linux-arm64-static.zip"
        return fn

    @property
    def z3_version(self):
        return "4.13.4"

    @property
    def z3_zip(self):
        if self.env.host.os.name == "windows":
            fn = "z3-%s-x64-win.zip" % self.z3_version
        elif self.env.host.os.name == "darwin":
            if self.env.target.cpu.name == "x86_64":
                fn = "z3-%s-x64-osx-13.7.1.zip" % self.z3_version
            else:
                fn = "z3-%s-arm64-osx-13.7.1.zip" % self.z3_version
        else: # self.env.host.os.name == "linux"
            if self.env.target.cpu.name == "x86_64":
                fn = "z3-%s-x64-glibc-2.35.zip" % self.z3_version
            else:
                fn = "z3-%s-arm64-glibc-2.34.zip" % self.z3_version
        return fn

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.gcc_tarball,
                url="https://gcc.gnu.org/pub/gcc/releases/gcc-%s/%s"
                % (self.version, self.gcc_tarball),
            ),
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://github.com/adacore/spark2014/tarball/%s"
                % self.spark_branch,
            ),
            self.HTTPSSourceBuilder(
                name=self.sparklib_tarball,
                url="https://github.com/adacore/sparklib/tarball/%s"
                % self.spark_branch,
            ),
            self.HTTPSSourceBuilder(
                name=self.cvc5_zip,
                url="https://github.com/cvc5/cvc5/releases/download/cvc5-%s/%s"
                % (self.cvc5_version, self.cvc5_zip),
            ),
            self.HTTPSSourceBuilder(
                name=self.z3_zip,
                url="https://github.com/Z3Prover/z3/releases/download/z3-%s/%s"
                % (self.z3_version, self.z3_zip),
            ),
        ]

    @property
    def build_source_list(self):
        return [
            Anod.Source(name=self.tarball, publish=True, dest=""),
            Anod.Source(name=self.gcc_tarball, publish=True, dest="gcc"),
            Anod.Source(name=self.sparklib_tarball, publish=True, dest="include"),
            Anod.Source(name=self.cvc5_zip, publish=True, dest="cvc5"),
            Anod.Source(name=self.z3_zip, publish=True, dest="z3"),
        ]

    build_space_name = "spark2014"

    @property
    def build_deps(self):
        deps = [
            Anod.Dependency("base_gcc"),
            Anod.Dependency("why3"),
            Anod.Dependency("alt-ergo"),
            Anod.Dependency("gmp"),
            Anod.Dependency("gmp",
                            qualifier="shared_lib",
                            local_name="gmp_shared"),
            Anod.Dependency("gprbuild"),
            Anod.Dependency("gnatcoll"),
            Anod.Dependency("gnatcoll-bindings"),
            Anod.Dependency("xmlada"),
            Anod.Dependency("libgpr2", qualifier="next"),
            Anod.Dependency("libgpr"),
            Anod.Dependency("langkit_support"),
            Anod.Dependency("adasat", track=True),
            Anod.Dependency("libadalang"),
        ]

        if self.env.target.os.name == "windows":
            deps.append(Anod.Dependency("libiconv"))

        return deps

    @Anod.primitive()
    def build(self):
        ada_dir = os.path.join(self["SRC_DIR"], "gcc", "gcc", "ada")
        gnat_src_dir = os.path.join(self["SRC_DIR"], "gnat2why", "gnat_src")
        sync_tree(ada_dir, gnat_src_dir, delete=True)

        make = Make(
            self,
            makefile=os.path.join(self["SRC_DIR"], "Makefile"),
            exec_dir=self["SRC_DIR"],
            jobs=self.jobs
        )
        for dep in self.deps:
            if dep not in ["gmp_shared"]:
                self.deps[dep].setenv()
        make("all-nightly", jobs=1)

        self.install()


    def install(self):
        libexec_spark = os.path.join(self["INSTALL_DIR"], "libexec", "spark")
        libexec_spark_bin = os.path.join(libexec_spark, "bin")

        mkdir (libexec_spark)
        mkdir (libexec_spark_bin)

        _bin = os.path.join(self["INSTALL_DIR"], "bin")
        sync_tree(os.path.join(self["SRC_DIR"], "install"), self["INSTALL_DIR"])

        sync_tree(self.deps["base_gcc"]["INSTALL_DIR"], libexec_spark, delete=False)
        # Remove all gnat* executables except gnatbind/gnatls, only keep
        # gcc/gnatbind/gpr* executables.
        for glob in ["gnat*", "gdb*", "gcov*", "ld*", "nm", "g++", "ar",
                     "as", "addr2line", "elfedit", "c++*", "lto-dump",
                     "ranlib", "objdump", "size", "readelf", "strings",
                     "strip"]:
            files = ls(os.path.join(libexec_spark, "bin", glob))
            for f in files:
                if (
                    not os.path.basename(f).startswith("gnatbind")
                    and not os.path.basename(f).startswith("gnatls")
                    and not os.path.basename(f).startswith("gnatwhy3")
                    ):
                    rm(f)

        sync_tree(self.deps["why3"]["INSTALL_DIR"], libexec_spark, delete=False)
        sync_tree(self.deps["alt-ergo"]["INSTALL_DIR"], libexec_spark, delete=False)
        sync_tree(self.deps["gprbuild"]["INSTALL_DIR"], libexec_spark, delete=False)
        sync_tree(self.deps["gmp_shared"]["INSTALL_DIR"], libexec_spark, delete=False)

        sync_tree(os.path.join(self["SRC_DIR"], "z3"), libexec_spark, delete=False)
        sync_tree(os.path.join(self["SRC_DIR"], "cvc5"), libexec_spark, delete=False)

        for fn in [
            "gnat2why",
            "spark_memcached_wrapper",
            "spark_report",
            "spark_semaphore_wrapper",
        ]:
            mv(
                os.path.join(_bin, fn + self.exec_suffix),
                libexec_spark_bin
            )
        mv (os.path.join(_bin, "target.atp"), libexec_spark_bin)

        rm(os.path.join(libexec_spark, "share", "doc"), True)

        # delete alt-ergo libs, these are not used by SPARK and take quite
        # some space
        for dir in ["alt-ergo", "alt-ergo-lib", "alt-ergo-parsers"]:
            rm(os.path.join(libexec_spark, "lib", dir), True)

        for exe in ["cvc5", "gnatwhy3", "alt-ergo"]:
            chmod("a+x",
                  os.path.join(libexec_spark_bin,
                               (exe + (".exe" if self.env.host.os.name == "windows"
                                        else ""))))

        for f in ls(os.path.join(libexec_spark, "bin", "why3*")):
            chmod("a+x", f)
