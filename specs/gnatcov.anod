from e3.os.fs import unixpath, touch
from e3.fs import cp
from e3.anod.helper import Make
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.diff import patch

import os

patch_name = "gnatcov.patch"


class GNATcov(spec("common")):
    @property
    def version(self):
        return "22.0"

    @property
    def tarball(self):
        return "gnatcov-%s.zip" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://github.com/AdaCore/gnatcoverage/archive/refs/heads/%s.zip"
                % self.version,
            ),
            self.LocalSourceBuilder(name=patch_name),
        ]

    @property
    def build_source_list(self):
        return [
            Anod.Source(name=self.tarball, publish=True, dest=""),
            self.Source(name=patch_name, publish=True, unpack_cmd=cp, dest="patches"),
        ]

    @property
    def build_deps(self):
        deps = [
            Anod.Dependency("base_gcc", track=True),
            Anod.Dependency("gprbuild", track=True),
            Anod.Dependency("libgpr", track=True),
            Anod.Dependency("gnatcoll", track=True),
            Anod.Dependency("gnatcoll-bindings", track=True),
            Anod.Dependency("langkit", track=True),
            Anod.Dependency("libadalang", track=True),
            Anod.Dependency("binutils", track=True),
            Anod.Dependency("gnatutil", track=True),
            Anod.Dependency("xmlada", track=True),
            Anod.Dependency("zlib", track=True),
            Anod.Dependency("gmp", track=True)
        ]
        if self.env.target.os.name == "windows":
            deps.append(Anod.Dependency("libiconv"))
        return deps

    @Anod.primitive()
    def build(self):
        # Binutils are not needed in PATH
        for m in [d for d in self.deps if d != "binutils"]:
            self.deps[m].setenv()

        # Little hack to apply the patch only once, there is probably a clean
        # way to do that.
        patched = os.path.join(self["SRC_DIR"], "patches", ".patched")
        if not os.path.exists(patched):
            patch(
                os.path.join(self["SRC_DIR"], "patches", patch_name),
                self.build_space.src_dir,
            )
            touch(patched)

        build_mode = "prod"
        exec_dir = os.path.join(self["SRC_DIR"], "tools", "gnatcov")

        make_all = Make(self, exec_dir=exec_dir, jobs=1)
        make_all.set_default_target("all")
        make_all.set_var("BINUTILS_SRC_DIR", self.deps["binutils"]["SRC_DIR"])
        make_all.set_var("BINUTILS_BUILD_DIR", self.deps["binutils"]["BUILD_DIR"])

        make_distrib = Make(self, exec_dir=exec_dir)
        make_distrib.set_var("PREFIX", unixpath(self["INSTALL_DIR"]))
        make_distrib.set_default_target("distrib-without-doc")

        for m in (make_all, make_distrib):
            m.set_var("BITS_ARCH", str(self.env.target.cpu.bits))
            m.set_var("DISTRIB_ARCH", self.env.build.cpu.name)
            m.set_var("BUILD_MODE", build_mode)
            m.set_var("ADAPTERS_LIST", "")

        make_all()
        make_distrib()
        self.clean()
