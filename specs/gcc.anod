from e3.os.fs import unixpath
from e3.anod.helper import Configure, Make, log
from e3.anod.spec import Anod
from e3.anod.loader import spec
import os
import re
import subprocess

class GCC(spec('common')):

    @property
    def version(self):
        return "10.2.0"

    @property
    def tarball(self):
        return 'gcc-%s.tar.gz' % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url='https://ftp.gnu.org/gnu/gcc/gcc-%s/%s' % (self.version,
                                                               self.tarball))]

    @property
    def build_source_list(self):
        return [Anod.Source(name=self.tarball,
                            publish=True, dest='')]

    @property
    def bootstrap(self):
        return 'bootstrap' in self.parsed_qualifier

    @property
    def is_cross(self):
        return self.env.build.triplet != self.env.target.triplet

    @property
    def build_space_name(self):
        if self.bootstrap:
            return "%s-bootstrap" % (self.name)
        else:
            return "%s" % (self.name)

    @property
    def enable_languages(self):
        if self.bootstrap:
            return ['c']
        else:
            return ['c', 'ada']

    @property
    def is_target_macos(self):
        # in macOS, the target triplet ends with the OS version
        return re.match('x86_64-apple-darwin', self.env.target.triplet) != None
    
    @property
    def build_deps(self):
        deps = [Anod.Dependency("gmp",      target='host', track=True),
                Anod.Dependency("mpfr",     target='host', track=True),
                Anod.Dependency("mpc",      target='host', track=True),
                Anod.Dependency("isl",      target='host', track=True)]

        if not self.is_target_macos:
            deps.append (Anod.Dependency("binutils", track=True))

        # We use the system's GCC/GNAT to build native GCC/GNAT, that's why it
        # is not specified as a dependency here.

        if self.is_cross and not self.bootstrap:
            deps.append (Anod.Dependency("newlib", track=True))
            deps.append (Anod.Dependency("gcc", local_name='gcc_native',
                                         target='host', track=True))

        return deps

    def configure_args(self):
        args = ["--disable-nls", # Disable Native Language Support (NLS)
                "--without-libiconv-prefix",
                "--disable-libstdcxx-pch",
                "--enable-lto"]

        if self.is_target_macos:
            # This is what GNAT CE 2020 used to overcome the unusual
            # arrangements in macOS Catalina and later.
            args.append ("--with-build-config=no")
            SDKROOT = \
                subprocess.check_output (['xcrun', '--show-sdk-path'],
                                         text=True)[:-1]
            args.append ("--with-build-sysroot=" + SDKROOT)
            args.append ("--with-sysroot=")
            # GNAT CE 2020 used a specs function xcode-path() which is
            # unknown to GCC.
            # Also, --sysroot= isn't accepted here (some weirdness about
            # the way the argument is presented to configure, involves
            # extra quotes ' ???)
            # Is this needed anyway?
            # args.append ("--with-specs='%%{!sysroot=*:--sysroot=%s}'"
            #              % SDKROOT)
        else:
            args.append ("--with-gnu-as")
            args.append ("--with-gnu-ld")

        # Linux64 Native
        if self.env.target.triplet == "x86_64-pc-linux-gnu":
            args.append("--disable-multilib")
            args.append("--enable-threads=posix")

        cross_commons = ["--enable-plugins",
                         "--disable-decimal-float",
                         "--disable-libffi",
                         "--disable-libgomp",
                         "--disable-libmudflap",
                         "--disable-libquadmath",
                         "--disable-libssp",
                         "--disable-libstdcxx-pch",
                         "--disable-nls",
                         "--disable-shared",
                         "--disable-threads",
                         "--disable-tls"
                         "--with-newlib"]

        if self.env.target.triplet == "arm-eabi":
            args += cross_commons
            args.append("--enable-multilib")
            args.append("--with-multilib-list=rmprofile")

        if self.env.target.triplet == "riscv64-elf":
            args += cross_commons
            args.append("--enable-multilib")


        return args

    @Anod.primitive()
    def build(self):
        for m in ("binutils", "gcc_native"):
            if m in self.deps:
                self.deps[m].setenv()

        # We need to install binutils in the compiler package
        if "binutils" in self.deps:
            self.deps["binutils"].merge(self["INSTALL_DIR"])
            configure.add("--with-build-time-tools=%s" %
                          os.path.join(self.deps["binutils"]["INSTALL_DIR"],
                                       'bin'))

        # Also install newlib for cross
        if "newlib" in self.deps:
            self.deps["newlib"].merge(self["INSTALL_DIR"])

        configure = Configure(self)
        configure.add("--build=%s" % self.env.build.triplet)
        configure.add("--host=%s" % self.env.host.triplet)
        configure.add("--target=%s" % self.env.target.triplet)
        configure.add('--prefix=%s' % unixpath(self['INSTALL_DIR']))

        configure.add("--enable-languages=" + ",".join(self.enable_languages))

        if "c++" in self.enable_languages:
            configure.add("--enable-libstdcxx")
            # Note that --disable-libstdcxx seems to break the builds

        if "ada" in self.enable_languages and not self.is_cross:
            configure.add("--enable-libada")
        else:
            configure.add("--disable-libada")

        for a in self.configure_args():
            configure.add(a)

        for m in ("mpfr", "gmp", "mpc", "isl"):
            configure.add("--with-%s=%s" % (m, unixpath(self.deps[m]["INSTALL_DIR"])))

        configure()

        make = Make(self)
        if self.bootstrap:
            make('all-gcc')
            make('install-gcc')
        else:
            make('all')

            if self.is_cross:
                make('cross-gnattools', exec_dir='gcc')
                make('ada.all.cross', exec_dir='gcc')

            make('install-strip')

        self.clean()
