from e3.os.fs import unixpath
from e3.fs import cp, mkdir, sync_tree
from e3.anod.helper import Configure, Make
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.env import Env
from e3.os.process import Run
import os

# A wrapper to call ld-classic on MacOS X
patch_name = "ld"

class GCC(spec("gh-artifact")):
    @property
    def version(self):
        return "13.2.0"

    @property
    def tarball(self):
        return "gcc-%s.tar.gz" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url=(
                    "https://ftp.gnu.org/gnu/gcc/gcc-%s/%s"
                    % (self.version, self.tarball)
                    if self.env.target.cpu.name == "x86_64"
                    else
                    "https://github.com/iains/gcc-13-branch/archive/refs/"
                    + "tags/gcc-13.2-darwin-r0.tar.gz"
                )
            ),
            self.LocalSourceBuilder(name=patch_name)
        ]

    @property
    def build_source_list(self):
        return [
            Anod.Source(name=self.tarball, publish=True, dest=""),
            self.Source(name=patch_name, publish=True, unpack_cmd=cp, dest="patches")
        ]

    @property
    def bootstrap(self):
        return "bootstrap" in self.parsed_qualifier

    @property
    def is_cross(self):
        return (
            self.env.target.triplet == "arm-eabi"
            or self.env.target.triplet == "riscv64-elf"
            or self.env.target.triplet == "avr-elf"
        )

    @property
    def build_space_name(self):
        if self.bootstrap:
            return "%s-bootstrap" % (self.name)
        else:
            return "%s" % (self.name)

    @property
    def enable_languages(self):
        if self.bootstrap:
            return ["c"]
        elif not self.env.target.os.is_bareboard:
            return ["c", "ada", "c++"]
        else:
            return ["c", "ada"]

    @property
    def build_deps(self):
        deps = [
            Anod.Dependency("gmp", host="build", target="host"),
            Anod.Dependency("mpfr", host="build", target="host"),
            Anod.Dependency("mpc", host="build", target="host"),
        ]

        # Select which compiler to use:
        # - gcc_native is a native compiler that was built with this script
        # - base_gcc is a native compiler downloaded from a binray archive
        #
        # To build the native compilers we can use a native compiler of the
        # last major version.
        #
        # To build the cross compilers we need to have a native compiler of the
        # same version that we are building.
        #
        if self.env.is_cross and not self.bootstrap:
            deps.append(Anod.Dependency("gcc", local_name="gcc_native", target="host"))
        else:
            deps.append(Anod.Dependency("base_gcc", host="build", target="host"))

        if self.env.build.os.name != "darwin":
            deps.append(Anod.Dependency("isl", host="build", target="host"))

        if self.env.target.os.name != "darwin":
            deps.append(Anod.Dependency("binutils", target="target"))

        if self.env.target.os.is_bareboard and not self.bootstrap:
            deps.append(Anod.Dependency("newlib"))

        if self.env.target.os.name == "windows":
            deps.append(
                Anod.Dependency("mingw", host="build", target="target", track=True)
            )

        return deps

    def configure_args(self):
        args = [
            "--disable-nls",  # Disable Native Language Support (NLS)
            "--without-libiconv-prefix",
            "--disable-libstdcxx-pch",
            "--enable-lto",
        ]

        # Linux64 Native
        if self.env.target.triplet == "x86_64-pc-linux-gnu":
            args.append("--disable-multilib")
            args.append("--enable-threads=posix")

        # Windows Native
        if self.env.target.triplet == "x86_64-w64-mingw32":
            args.append("--disable-multilib")
            args.append("--enable-threads=win32")
            args.append(
                "--with-native-system-header-dir=%s"
                % unixpath(os.path.join(self["INSTALL_DIR"], "include"))
            )

        # macOS Native
        if self.env.target.os.name == "darwin":

            # Xcode 10 dropped 32-bit support
            args.append("--disable-multilib")

            args.append("--disable-libcilkrts")

            # Workaround for Xcode 12.5 bug on Intel
            # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
            args.append("--without-build-config")

            xcode = "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
            clu = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"

            args.append("--with-build-sysroot=%s" % xcode)
            args.append("--with-specs=%%{!sysroot=*:--sysroot=%%:if-exists-else(%s %s)}" %
                        (xcode, clu))

        if self.env.host.os.name != "darwin":
            args.append("--with-gnu-ld")
            args.append("--with-gnu-as")

        cross_commons = [
            "--enable-plugins",
            "--disable-decimal-float",
            "--disable-libffi",
            "--disable-libgomp",
            "--disable-libmudflap",
            "--disable-libquadmath",
            "--disable-libssp",
            "--disable-libstdcxx-pch",
            "--disable-nls",
            "--disable-shared",
            "--disable-threads",
            "--disable-tls",
            "--with-newlib",
        ]

        if self.env.target.triplet == "arm-eabi":
            args += cross_commons
            args.append("--enable-multilib")
            args.append("--with-multilib-list=rmprofile")

        if self.env.target.triplet == "riscv64-elf":
            args += cross_commons
            args.append("--enable-multilib")

        return args

    def artifact_build(self):
        # This spec inherit from gh-artifact and therefore has a different
        # build method.

        for m in ("binutils", "gcc_native", "mingw", "base_gcc"):
            if m in self.deps:
                self.deps[m].setenv()

        # We need to install binutils in the compiler package
        if "binutils" in self.deps:
            self.deps["binutils"].merge(self["INSTALL_DIR"])

        # Also install newlib for cross
        if "newlib" in self.deps:
            self.deps["newlib"].merge(self["INSTALL_DIR"])

        # The libsubdir relative path
        gcc_libsubdir = os.path.join(
            "lib", "gcc", self.env.target.triplet, self.version
        )

        if self.env.target.os.name == "windows":
            # Deploy the mingw dependency in the ./mingw64 directory
            self.deps["mingw"].merge(os.path.join(self["SRC_DIR"], "mingw64"))

        # On windows we need to install the mingw and w32api include and libs
        if self.env.target.os.name == "windows":
            target_path = os.path.join(self["BUILD_DIR"], gcc_libsubdir)
            mkdir(os.path.join(target_path, "include"))
            sync_tree(
                os.path.join(self["SRC_DIR"], "mingw64", "include"),
                os.path.join(target_path, "include"),
                delete=False,
            )
            sync_tree(
                os.path.join(self["SRC_DIR"], "mingw64", "lib"),
                target_path,
                delete=False,
            )
            mkdir(os.path.join(self["BUILD_DIR"], "gcc"))
            sync_tree(
                os.path.join(self["BUILD_DIR"], "lib"),
                os.path.join(self["BUILD_DIR"], "gcc", "lib"),
            )

        configure = Configure(self)
        configure.add("--prefix=%s" % unixpath(self["INSTALL_DIR"]))

        if "binutils" in self.deps:
            configure.add(
                "--with-build-time-tools=%s"
                % unixpath(os.path.join(self.deps["binutils"]["INSTALL_DIR"], "bin"))
            )

        configure.add("--enable-languages=" + ",".join(self.enable_languages))

        if "c++" in self.enable_languages:
            configure.add("--enable-libstdcxx")
            configure.add("--enable-libstdcxx-threads")
            # Note that --disable-libstdcxx seems to break the builds

        if "ada" in self.enable_languages and not self.env.target.os.is_bareboard:
            configure.add("--enable-libada")
        else:
            configure.add("--disable-libada")

        for a in self.configure_args():
            configure.add(a)

        for m in ("mpfr", "gmp", "mpc", "isl"):
            if m in self.deps:
                configure.add(
                    "--with-%s=%s" % (m, unixpath(self.deps[m]["INSTALL_DIR"]))
                )

        if self.env.host.os.name == "windows":
            # https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=902c755930326cb4405672aa3ea13c35c653cbff
            os.environ["CPPFLAGS"] = "-DCOM_NO_WINDOWS_H"

        configure()

        make = Make(self)
        if self.bootstrap:

            # We don't need to keep the bootstrap compiler so the artifact is
            # disabled to save disk space.
            self.disable_out_artifact()

            make("all-gcc", jobs=self.jobs)
            make("install-gcc", jobs=1)
        else:

            make("all", jobs=self.jobs)

            if self.env.is_cross:
                make("cross-gnattools", exec_dir="gcc", jobs=self.jobs)
                make("ada.all.cross", exec_dir="gcc", jobs=self.jobs)

            make("install-strip", jobs=1)

        # Add mingw
        if self.env.target.os.name == "windows":
            if not self.env.is_cross:
                cp(
                    os.path.join(self["INSTALL_DIR"], gcc_libsubdir, "adalib", "*.dll"),
                    os.path.join(self["INSTALL_DIR"], "bin"),
                )
            sync_tree(
                os.path.join(self["SRC_DIR"], "mingw64", "include"),
                os.path.join(self["INSTALL_DIR"], self.env.target.triplet, "include"),
                delete=False,
            )
            sync_tree(
                os.path.join(self["SRC_DIR"], "mingw64", "lib"),
                os.path.join(self["INSTALL_DIR"], gcc_libsubdir),
                delete=False,
            )

        # Add ld-classic wrapper
        if self.env.target.os.name == "darwin":
            gcc = os.path.join(self["INSTALL_DIR"], "bin", "gcc")
            p = Run([gcc, "--print-prog-name=cc1"])
            libexec = os.path.dirname(p.out.strip())
            cp(
                os.path.join(self["SRC_DIR"], "patches", patch_name),
                libexec,
            )
        self.clean()
