from e3.os.fs import unixpath, cd, touch
from e3.fs import sync_tree, cp
from e3.anod.helper import Make, text_replace
from e3.anod.spec import Anod
from e3.anod.loader import spec
import os
from datetime import date

class GPRbuild(spec("gh-artifact")):
    @property
    def version(self):
        return "22.0.0"

    @property
    def tarball(self):
        return "gprbuild-%s.tar.gz" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball,
                url="https://github.com/AdaCore/gprbuild/archive/v%s/%s"
                % (self.version, self.tarball),
            ),
        ]

    @property
    def build_source_list(self):
        if self.bootstrap:
            return [
                Anod.Source(name=self.tarball, publish=True, dest=""),
                Anod.Source(
                    name=self.deps["gprconfig_kb"].tarball,
                    publish=True,
                    dest="gprconfig_kb",
                ),
                Anod.Source(
                    name=self.deps["xmlada"].tarball, publish=True, dest="xmlada"
                ),
            ]
        else:
            return [
                Anod.Source(name=self.tarball, publish=True, dest=""),
                Anod.Source(
                    name=self.deps["gprconfig_kb"].tarball,
                    publish=True,
                    dest="gprconfig_kb",
                ),
            ]

    @property
    def bootstrap(self):
        return "bootstrap" in self.parsed_qualifier

    @property
    def build_space_name(self):
        if self.bootstrap:
            return "%s-bootstrap" % (self.name)
        else:
            return "%s" % (self.name)

    @property
    def build_deps(self):
        deps = [
            Anod.Dependency("base_gcc", track=True),
            Anod.Dependency("gprconfig_kb", require="source_pkg", track=True),
        ]

        if not self.bootstrap:
            deps.append(Anod.Dependency("xmlada", track=True))
            deps.append(Anod.Dependency("gprbuild", qualifier="bootstrap", track=True))
        else:
            deps.append(Anod.Dependency("xmlada", require="source_pkg", track=True))

        return deps

    def update_version(self):
        text_replace(
            os.path.join(self["SRC_DIR"], "gpr", "src", "gpr-version.ads"),
            [
                (
                    "Build_Type : constant Gnat_Build_Type := Gnatpro;",
                    "Build_Type : constant Gnat_Build_Type := FSF;",
                )
            ],
        )
        text_replace(
            os.path.join(self["SRC_DIR"], "gpr", "src", "gpr-version.ads"),
            [
                (
                    "Gpr_Version : constant String.*",
                    'Gpr_Version : constant String := "%s";' % self.version,
                ),
                (
                    "Date : constant String.*",
                    'Date : constant String := "%s";' % str(date.today()),
                ),
                (
                    "Current_Year : constant String.*",
                    'Current_Year : constant String := "%s";' % str(date.today().year),
                ),
            ],
        )

    def do_bootstrap(self):
        for m in ["base_gcc"]:
            if m in self.deps:
                self.deps[m].setenv()

        if self.env.build.os.name == "darwin":
            # macOS' install (from BSD) doesn't support -t switch
            text_replace(os.path.join(self["SRC_DIR"], "bootstrap.sh"), [(" -t ", " ")])

        cd(self["SRC_DIR"])
        self.shell(
            "./bootstrap.sh",
            "--with-xmlada=%s" % os.path.join(self["SRC_DIR"], "xmlada"),
            "--with-kb=%s" % os.path.join(self["SRC_DIR"], "gprconfig_kb"),
            "--build",
        )

        self.shell(
            "./bootstrap.sh",
            "--prefix=%s" % unixpath(self["INSTALL_DIR"]),
            "--with-xmlada=%s" % os.path.join(self["SRC_DIR"], "xmlada"),
            "--with-kb=%s" % os.path.join(self["SRC_DIR"], "gprconfig_kb"),
            "--install",
        )
        self.clean()

    def artifact_build(self):
        # This spec inherit from gh-artifact and therefore has a different
        # build method.

        self.update_version()

        if self.bootstrap:
            return self.do_bootstrap()

        for m in ["base_gcc", "xmlada", "gprbuild"]:
            if m in self.deps:
                self.deps[m].setenv()

        make = Make(self, makefile=os.path.join(self["SRC_DIR"], "Makefile"))

        make.set_var("TARGET", self.env.target.triplet)
        make.set_var("prefix", unixpath(self["INSTALL_DIR"]))

        make("distall", jobs=1)

        # Install the gprconfig knowledge-base
        kb_src = os.path.join(self["SRC_DIR"], "gprconfig_kb", "db")
        kb_dst = os.path.join(self["INSTALL_DIR"], "share", "gprconfig")
        sync_tree(kb_src, kb_dst)

        self.clean()
