from e3.os.fs import unixpath, touch
from e3.fs import cp
from e3.anod.helper import Configure, Make
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.diff import patch
import os

# patch from msys2:
patch_name = "gdb-0002-Fix-using-gnu-print.patch"


class GDB(spec("common")):
    @property
    def version(self):
        return "16.3"

    @property
    def tarball(self):
        return "gdb-%s.tar.gz" % self.version

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=self.tarball, url="https://gcc.gnu.org/pub/gdb/releases/%s" % self.tarball
            ),
            self.LocalSourceBuilder(name=patch_name),
        ]

    @property
    def build_source_list(self):
        return [
            Anod.Source(name=self.tarball, publish=True, dest=""),
            self.Source(name=patch_name, publish=True, unpack_cmd=cp, dest="patches"),
        ]

    @property
    def build_deps(self):
        deps = [
            Anod.Dependency("base_gcc", target="host"),
            Anod.Dependency("mpfr", target="host"),
            Anod.Dependency("mpc", target="host"),
            Anod.Dependency("gmp", target="host"),
        ]

        if self.env.host.os.name == "windows":
            deps.append(Anod.Dependency("libiconv", target="host"))

        return deps

    @Anod.primitive()
    def build(self):
        for m in self.deps:
            self.deps[m].setenv()

        # Little hack to apply the patch only once, there is probably a clean
        # way to do that.
        patched = os.path.join(self["SRC_DIR"], "patches", ".patched")
        if not os.path.exists(patched):
            patch(
                os.path.join(self["SRC_DIR"], "patches", patch_name),
                self.build_space.src_dir,
            )
            touch(patched)

        configure = Configure(self)
        configure.add("--prefix=%s" % unixpath(self["INSTALL_DIR"]))
        configure.add(
            "--disable-nls",  # Disable Native Language Support (NLS)
            "--disable-werror",
            "--disable-binutils",
            "--disable-gas",
            "--disable-ld",
            "--disable-gprof",
            "--disable-libctf",
            "--enable-gdb",
            "--with-zlib",
            "--without-libusb",
            "--without-bugurl",
            "--without-guile",
            "--without-zstd",
            "--disable-plugins",
            "--disable-gdbserver",
            "--with-static-standard-libraries",
            "--disable-source-highlight",  # Incomaptible with static std libs
            "--with-curses",
            "--disable-sim",
            "--with-mpfr=%s" % unixpath(self.deps["mpfr"]["INSTALL_DIR"]),
            "--with-libmpfr=%s" % unixpath(self.deps["mpfr"]["INSTALL_DIR"]),
            "--with-gmp=%s" % unixpath(self.deps["gmp"]["INSTALL_DIR"]),
            "--with-libgmp=%s" % unixpath(self.deps["gmp"]["INSTALL_DIR"]),
            "--with-mpc=%s" % unixpath(self.deps["mpc"]["INSTALL_DIR"]),
            "--with-python=no"
        )

        if self.env.host.os.name == "windows":
            configure.add("CFLAGS=-std=gnu17") # fix for new defaults in gcc 15.1.0
            configure.add("--disable-tui")
            configure.add(
                "--with-libiconv-prefix=%s"
                % unixpath(self.deps["libiconv"]["INSTALL_DIR"])
            )
        else:
            configure.add("--enable-tui")

        configure()

        make = Make(self)
        make()
        make("install")

        self.clean()
